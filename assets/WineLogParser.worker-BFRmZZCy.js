(function(){"use strict";var T=(t=>(t.CALL="Call",t.RETURN="Ret",t.TEXT="Text",t))(T||{});async function*D(t,e){var l,h;let i=0;const u=new TextDecoder("utf8"),w=t.getReader();let s=await w.read();s.value&&(i+=s.value.length,(l=e==null?void 0:e.onReadProgress)==null||l.call(e,i));let c=s.value?u.decode(s.value,{stream:!0}):"";const E=/\r?\n/gm;let m=0;for(;;){const d=E.exec(c);if(!d){if(s.done)break;const a=c.slice(m);s=await w.read(),s.value&&(i+=s.value.length,(h=e==null?void 0:e.onReadProgress)==null||h.call(e,i));const p=s.value?u.decode(s.value,{stream:!0}):"";c=a+p,m=E.lastIndex=0;continue}yield c.substring(m,d.index),m=E.lastIndex}m<c.length&&(yield c.slice(m))}const U=/^\d+\.\d+:/,k=/(?:(?<timestamp>\d+\.\d+):)?(?<pid>[a-f0-9]{4}):(?<tid>[a-f0-9]{4}):(?<type>[a-zA-Z_:]+) +(?<message>.+)/,$=/(?:(?:(?<module>[\w]+)\.(?<func>[\w]+))|(?<unknown>.+))\((?<args>.+)?\)(?: retval=(?<retval>[a-f0-9]+))?(?: ret=(?<callsite>[a-f0-9]+))?/,N=/L"(?<string>.+)"/,F=/[^\\]+$/;async function C(t,e){if(typeof t=="string")return C(new Blob([t]),e);if(t instanceof Blob)return C(t.stream(),e);const i=t,u=[],w={},s={},c={},E={},m=D(i,{onReadProgress:e==null?void 0:e.onReadProgress});let l=0,h=1;const d=[];let a="",p=0,L;for(;;){if(l===2&&(d.length?a=d.shift():l=0),l!==2){const n=await m.next();if(n.done)break;a=n.value}const M=k.exec(a.slice(h));if(M){if(h===1){const n=U.exec(a);if(n){h=n[0].length+1,l=2,d.push(a);continue}}l=1,d.push(a.slice(0,M.index+h),a.slice(M.index+h));continue}const P=a.match(k);if(P){if(l===1){d.push(a);continue}}else{if(l===1)d[0]+=a,l=2;else{const n={id:p,type:T.TEXT,text:a};u.push(n),++p}continue}const{pid:r,tid:g,type:_,message:x,timestamp:H}=P.groups;let R=w[r];R||(R={id:r,name:null,threads:[]},w[r]=R,s[r]={},c[r]={},E[r]={});let v=s[r][g];v||(v={id:g,name:null},s[r][g]=v,w[r].threads.push(v));const o=c[r][g];let f;const y={id:p,process:R,thread:v};if(H){const n=parseFloat(H)*1e3|0;L||(L=n),y.time=n-L}switch(_){case T.CALL:case T.RETURN:const n=x.match($);if(!n)throw new Error(`could not parse Call/Ret line: '${a}'`);const{groups:{unknown:O,module:W,func:X,args:b,retval:j,callsite:z}}=n;if(O)continue;const S={module:W,func:X,callsite:z};_===T.CALL?(f={type:T.CALL,...y,...S,args:b==null?void 0:b.split(",")},c[r][g]=f):(f={type:T.RETURN,...y,...S,retval:j},o&&f.callsite===o.callsite&&(o.return=f,E[r][g]===o&&(o.inlinable=!0)),c[r][g]=o==null?void 0:o.parent);break;default:const[G,I="",B=""]=_.split(":");if(f={...y,channel:I,class:G,logger:B,message:x},I==="threadname"){const A=x.match(N);A&&(v.name=A.groups.string)}else if(I==="module"&&B==="get_load_order"){const A=x.match(N);if(A&&!R.path&&(R.path=A.groups.string.replaceAll("\\\\","\\"),R.name=R.path.match(F)[0]),!A)throw new Error(`could not extract wide string from message: ${x}`)}}o&&(f.parent=o),u.push(f),E[r][g]=f,++p}return{processes:Object.values(w),entries:u}}self.addEventListener("message",async t=>{const e=t.data;try{const i=await C(e,{onReadProgress(u){self.postMessage({type:"progress",bytesRead:u})}});self.postMessage({type:"complete",result:i})}catch(i){self.postMessage({type:"error",error:i})}})})();
